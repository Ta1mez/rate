from __future__ import annotations
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from cardinal import Cardinal

import telebot
from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

import json
import os

# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–ª–∞–≥–∏–Ω–∞
NAME = "Rate Calculator Plugin"
VERSION = "3.0.8"
DESCRIPTION = "–ü–ª–∞–≥–∏–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –∏ —Ä–∞—Å—á—ë—Ç–∞ —á–∏—Å—Ç–æ–π –≤—ã–≥–æ–¥—ã."
CREDITS = "@ta1mez"
UUID = "c76d42ea-5128-4f67-8a13-7d8c9a0bfa33"
SETTINGS_PAGE = False

# –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤
RATES_FILE = "exchange_rates.json"

def save_exchange_rates():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –≤ —Ñ–∞–π–ª."""
    try:
        with open(RATES_FILE, "w", encoding="utf-8") as f:
            json.dump(exchange_rates, f, ensure_ascii=False, indent=4)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤: {e}")

def load_exchange_rates():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏–∑ —Ñ–∞–π–ª–∞."""
    if os.path.exists(RATES_FILE):
        try:
            with open(RATES_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–æ–≤: {e}")
    return {
        "RUB": 5.5289,
        "UAH": 0.4380,
        "BRL": 3.5000,  # –î–æ–±–∞–≤–ª–µ–Ω—ã –±—Ä–∞–∑–∏–ª—å—Å–∫–∏–µ —Ä–µ–∞–ª—ã —Å 4 —Ü–∏—Ñ—Ä–∞–º–∏ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏
        "USD": 18.65
    }  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω

exchange_rates = load_exchange_rates()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
last_requests = {}
alternate_commission_states = {}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def generate_main_message():
    return (
        f"<b>üí≥ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç:</b>\n"
        f"‚Ä¢ üá∑üá∫ <b>MDL - RUB:</b> <code>{exchange_rates['RUB']:.4f}</code> RUB\n"
        f"‚Ä¢ üá∫üá¶ <b>UAH - MDL:</b> <code>{exchange_rates['UAH']:.4f}</code> MDL\n"
        f"‚Ä¢ üáßüá∑ <b>BRL - MDL:</b> <code>{exchange_rates['BRL']:.4f}</code> MDL\n"  # –î–æ–±–∞–≤–ª–µ–Ω—ã —Ä–µ–∞–ª—ã
        f"‚Ä¢ üá∫üá∏ <b>USD - MDL:</b> <code>{exchange_rates['USD']:.2f}</code> MDL\n\n"
        f"‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:"
    )

def main(cardinal: Cardinal, *args):
    if not cardinal.telegram:
        return
    tg = cardinal.telegram
    bot = tg.bot

    def start_rate(message: Message, edit_message_id: int = None):
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("üí≥ –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã", callback_data="update_rates"),
            InlineKeyboardButton("üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—ã–≥–æ–¥—É", callback_data="calculate_profit")
        )
        if edit_message_id:
            bot.edit_message_text(generate_main_message(), message.chat.id, edit_message_id, reply_markup=markup, parse_mode="HTML")
        else:
            bot.send_message(message.chat.id, generate_main_message(), reply_markup=markup, parse_mode="HTML")

    def handle_callback(call):
        user_id = call.from_user.id
        last_requests.pop(user_id, None)  # –°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if call.data == "update_rates":
            markup = InlineKeyboardMarkup(row_width=1)
            markup.add(
                InlineKeyboardButton("üá∑üá∫ MDL - RUB", callback_data="update_rub"),
                InlineKeyboardButton("üá∫üá¶ UAH - MDL", callback_data="update_uah"),
                InlineKeyboardButton("üáßüá∑ BRL - MDL", callback_data="update_brl"),  # –î–æ–±–∞–≤–ª–µ–Ω—ã —Ä–µ–∞–ª—ã
                InlineKeyboardButton("üá∫üá≤ USD - MDL", callback_data="update_usd"),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            )
            bot.edit_message_text(
                "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–±–Ω–æ–≤–ª—è–µ–º—ã–π –∫—É—Ä—Å:",
                call.message.chat.id,
                call.message.id,
                reply_markup=markup
            )
        elif call.data.startswith("update_"):
            currency = call.data.split("_")[1]
            if currency == "rub":
                markup = InlineKeyboardMarkup(row_width=1)
                markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_update_rates"))
                bot.edit_message_text(
                    "üü¢ –ü–æ –∫–∞–∫–æ–º—É –∫—É—Ä—Å—É –∫—É–ø–ª–µ–Ω—ã USDT?",
                    call.message.chat.id,
                    call.message.id,
                    reply_markup=markup
                )
                last_requests[user_id] = "update_rub"
                bot.register_next_step_handler(call.message, lambda msg: update_rub_rate(msg, call.message.id))
            elif currency == "uah":
                markup = InlineKeyboardMarkup(row_width=1)
                markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_update_rates"))
                bot.edit_message_text(
                    "üá≤üá© –ö–∞–∫–∞—è —Å—É–º–º–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ª–µ—è—Ö?",
                    call.message.chat.id,
                    call.message.id,
                    reply_markup=markup
                )
                last_requests[user_id] = "update_uah"
                bot.register_next_step_handler(call.message, lambda msg: update_uah_rate(msg, call.message.id))
            elif currency == "brl":  # –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ BRL
                markup = InlineKeyboardMarkup(row_width=1)
                markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_update_rates"))
                bot.edit_message_text(
                    "üá≤üá© –ö–∞–∫–∞—è —Å—É–º–º–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ª–µ—è—Ö?",
                    call.message.chat.id,
                    call.message.id,
                    reply_markup=markup
                )
                last_requests[user_id] = "update_brl"
                bot.register_next_step_handler(call.message, lambda msg: update_brl_rate(msg, call.message.id))
            elif currency == "usd":
                markup = InlineKeyboardMarkup(row_width=1)
                markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_update_rates"))
                bot.edit_message_text(
                    "üá∫üá≤ –ö–∞–∫–æ–π –∫—É—Ä—Å <b>USD - MDL</b>?",
                    call.message.chat.id,
                    call.message.id,
                    parse_mode="HTML",
                    reply_markup=markup
                )
                last_requests[user_id] = "update_usd"
                bot.register_next_step_handler(call.message, lambda msg: update_usd_rate(msg, call.message.id))

        elif call.data == "calculate_profit":
            markup = InlineKeyboardMarkup(row_width=1)
            markup.add(
                InlineKeyboardButton("üü° Brawl Stars", callback_data="brawl_stars"),
                InlineKeyboardButton("üî¥ Clash Royale", callback_data="clash_royale"),
                InlineKeyboardButton("üîµ Telegram", callback_data="telegram"),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            )
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞
            if call.message.text and "üí∞ –ß–∏—Å—Ç–∞—è –≤—ã–≥–æ–¥–∞" in call.message.text:
                # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞ –ø–æ—Å–ª–µ —Ä–∞—Å—á—ë—Ç–∞ (—á–∏—Å—Ç–∞—è –≤—ã–≥–æ–¥–∞ —É–∂–µ –±—ã–ª–∞ –ø–æ–∫–∞–∑–∞–Ω–∞)
                bot.send_message(call.message.chat.id, "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
            else:
                # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                bot.edit_message_text("üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", call.message.chat.id, call.message.id, reply_markup=markup)
        
            bot.answer_callback_query(call.id)

        elif call.data == "brawl_stars":
            markup = InlineKeyboardMarkup(row_width=1)
            markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_game_selection"))
            bot.edit_message_text(
                "üí∏ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ª–æ—Ç–∞ (–¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è) –≤ —Ä—É–±–ª—è—Ö:",
                call.message.chat.id,
                call.message.id,
                reply_markup=markup
            )
            last_requests[user_id] = "brawl_stars"
            bot.register_next_step_handler(call.message, lambda msg: get_brawl_stars_lot_price(msg, call.message.id))

        elif call.data == "clash_royale":
            markup = InlineKeyboardMarkup(row_width=1)
            markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_game_selection"))
            bot.edit_message_text(
                "üí∏ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ª–æ—Ç–∞ (–¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è) –≤ —Ä—É–±–ª—è—Ö:",
                call.message.chat.id,
                call.message.id,
                reply_markup=markup
            )
            last_requests[user_id] = "clash_royale"
            bot.register_next_step_handler(call.message, lambda msg: get_clash_royale_lot_price(msg, call.message.id))

        elif call.data == "telegram":
            markup = InlineKeyboardMarkup(row_width=1)
            markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_game_selection"))
            bot.edit_message_text(
                "üí∏ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö:",
                call.message.chat.id,
                call.message.id,
                reply_markup=markup
            )
            last_requests[user_id] = "telegram"
            bot.register_next_step_handler(call.message, lambda msg: get_telegram_lot_price(msg, call.message.id))

        elif call.data == "back_to_main":
            start_rate(call.message, call.message.id)
        elif call.data == "back_to_update_rates":
            markup = InlineKeyboardMarkup(row_width=1)
            markup.add(
                InlineKeyboardButton("üá∑üá∫ MDL - RUB", callback_data="update_rub"),
                InlineKeyboardButton("üá∫üá¶ UAH - MDL", callback_data="update_uah"),
                InlineKeyboardButton("üáßüá∑ BRL - MDL", callback_data="update_brl"),  # –î–æ–±–∞–≤–ª–µ–Ω—ã —Ä–µ–∞–ª—ã
                InlineKeyboardButton("üá∫üá≤ USD - MDL", callback_data="update_usd"),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            )
            bot.edit_message_text(
                "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–±–Ω–æ–≤–ª—è–µ–º—ã–π –∫—É—Ä—Å:",
                call.message.chat.id,
                call.message.id,
                reply_markup=markup
            )
        elif call.data == "back_to_game_selection":
            markup = InlineKeyboardMarkup(row_width=1)
            markup.add(
                InlineKeyboardButton("üü° Brawl Stars", callback_data="brawl_stars"),
                InlineKeyboardButton("üî¥ Clash Royale", callback_data="clash_royale"),
                InlineKeyboardButton("üîµ Telegram", callback_data="telegram"),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            )
            bot.edit_message_text(
                "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                call.message.chat.id,
                call.message.id,
                reply_markup=markup
            )

    def update_rub_rate(message: Message, edit_message_id: int):
        user_id = message.from_user.id
        if last_requests.get(user_id) == "update_rub":
            try:
                buy_rate = float(message.text)
                markup = InlineKeyboardMarkup(row_width=1)
                markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_update_rates"))
                bot.send_message(message.chat.id, "üî¥ –ü–æ –∫–∞–∫–æ–º—É –∫—É—Ä—Å—É –ø—Ä–æ–¥–∞–Ω—ã USDT?", reply_markup=markup)
                last_requests[user_id] = "finalize_rub"
                bot.register_next_step_handler(message, lambda msg: finalize_update_rub_rate(msg, buy_rate))
            except ValueError:
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫—É—Ä—Å –ø–æ–∫—É–ø–∫–∏ USDT.")
                bot.register_next_step_handler(message, lambda msg: update_rub_rate(msg, edit_message_id))

    def finalize_update_rub_rate(message: Message, buy_rate: float):
        user_id = message.from_user.id
        if last_requests.get(user_id) == "finalize_rub":
            try:
                sell_rate = float(message.text)
                exchange_rates["RUB"] = buy_rate / sell_rate
                save_exchange_rates()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã
                bot.send_message(message.chat.id, "‚úÖ –ö—É—Ä—Å <b>üá∑üá∫ MDL - RUB</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!", parse_mode="HTML")
                start_rate(message)
            except ValueError:
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏ USDT.")
                bot.register_next_step_handler(message, lambda msg: finalize_update_rub_rate(msg, buy_rate))

    def update_uah_rate(message: Message, edit_message_id: int):
        user_id = message.from_user.id
        if last_requests.get(user_id) == "update_uah":
            try:
                mdl_amount = float(message.text)
                markup = InlineKeyboardMarkup(row_width=1)
                markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_update_rates"))
                bot.send_message(message.chat.id, "üá∫üá¶ –ö–∞–∫–∞—è —Å—É–º–º–∞ —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –≥—Ä–∏–≤–Ω–∞—Ö?", reply_markup=markup)
                last_requests[user_id] = "finalize_uah"
                bot.register_next_step_handler(message, lambda msg: finalize_update_uah_rate(msg, mdl_amount))
            except ValueError:
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ –ª–µ—è—Ö.")
                bot.register_next_step_handler(message, lambda msg: update_uah_rate(msg, edit_message_id))

    def finalize_update_uah_rate(message: Message, mdl_amount: float):
        user_id = message.from_user.id
        if last_requests.get(user_id) == "finalize_uah":
            try:
                uah_amount = float(message.text)
                exchange_rates["UAH"] = mdl_amount / uah_amount
                save_exchange_rates()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã
                bot.send_message(message.chat.id, "‚úÖ –ö—É—Ä—Å <b>üá∫üá¶ UAH - MDL</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!", parse_mode="HTML")
                start_rate(message)
            except ValueError:
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ –≥—Ä–∏–≤–Ω–∞—Ö.")
                bot.register_next_step_handler(message, lambda msg: finalize_update_uah_rate(msg, mdl_amount))

    def update_brl_rate(message: Message, edit_message_id: int):  # –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è BRL
        user_id = message.from_user.id
        if last_requests.get(user_id) == "update_brl":
            try:
                mdl_amount = float(message.text)
                markup = InlineKeyboardMarkup(row_width=1)
                markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_update_rates"))
                bot.send_message(message.chat.id, "üáßüá∑ –ö–∞–∫–∞—è —Å—É–º–º–∞ —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ä–µ–∞–ª–∞—Ö?", reply_markup=markup)
                last_requests[user_id] = "finalize_brl"
                bot.register_next_step_handler(message, lambda msg: finalize_update_brl_rate(msg, mdl_amount))
            except ValueError:
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ –ª–µ—è—Ö.")
                bot.register_next_step_handler(message, lambda msg: update_brl_rate(msg, edit_message_id))

    def finalize_update_brl_rate(message: Message, mdl_amount: float):  # –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è BRL
        user_id = message.from_user.id
        if last_requests.get(user_id) == "finalize_brl":
            try:
                brl_amount = float(message.text)
                exchange_rates["BRL"] = mdl_amount / brl_amount
                save_exchange_rates()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã
                bot.send_message(message.chat.id, "‚úÖ –ö—É—Ä—Å <b>üáßüá∑ BRL - MDL</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!", parse_mode="HTML")
                start_rate(message)
            except ValueError:
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ —Ä–µ–∞–ª–∞—Ö.")
                bot.register_next_step_handler(message, lambda msg: finalize_update_brl_rate(msg, mdl_amount))

    def update_usd_rate(message: Message, edit_message_id: int):
        user_id = message.from_user.id
        if last_requests.get(user_id) == "update_usd":
            try:
                exchange_rates["USD"] = float(message.text)
                save_exchange_rates()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã
                bot.send_message(message.chat.id, "‚úÖ –ö—É—Ä—Å <b>üá∫üá≤ USD - MDL</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!", parse_mode="HTML")
                start_rate(message)
            except ValueError:
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫—É—Ä—Å USD - MDL.")
                bot.register_next_step_handler(message, lambda msg: update_usd_rate(msg, edit_message_id))

    def get_brawl_stars_lot_price(message: Message, edit_message_id: int):
        user_id = message.from_user.id
        if last_requests.get(user_id) == "brawl_stars":
            try:
                lot_price_buyer = float(message.text)
                lot_price = lot_price_buyer * (1 - 0.16068374059755964)  # –í—ã—á–∏—Ç–∞–µ–º 16.068374059755964%
                markup = InlineKeyboardMarkup(row_width=1)
                markup.add(
                    InlineKeyboardButton("üá∫üá¶ –ì—Ä–∏–≤–Ω—ã", callback_data=f"brawl_profit_uah_{lot_price}_{lot_price_buyer}"),
                    InlineKeyboardButton("üáßüá∑ –†–µ–∞–ª—ã", callback_data=f"brawl_profit_brl_{lot_price}_{lot_price_buyer}"),  # –î–æ–±–∞–≤–ª–µ–Ω—ã —Ä–µ–∞–ª—ã
                    InlineKeyboardButton("üá∫üá≤ –î–æ–ª–ª–∞—Ä—ã", callback_data=f"brawl_profit_usd_{lot_price}_{lot_price_buyer}"),
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_game_selection")
                )
                bot.send_message(message.chat.id, "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∞–∫—Ü–∏–∏:", reply_markup=markup)
                last_requests[user_id] = f"brawl_select_currency_{lot_price}_{lot_price_buyer}"
            except ValueError:
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É –ª–æ—Ç–∞.")
                bot.register_next_step_handler(message, lambda msg: get_brawl_stars_lot_price(msg, edit_message_id))

    def get_clash_royale_lot_price(message: Message, edit_message_id: int):
        user_id = message.from_user.id
        if last_requests.get(user_id) == "clash_royale":
            try:
                lot_price_buyer = float(message.text)
                lot_price = lot_price_buyer * (1 - 0.123214261446109)  # –í—ã—á–∏—Ç–∞–µ–º 12.3214261446109%
                markup = InlineKeyboardMarkup(row_width=1)
                markup.add(
                    InlineKeyboardButton("üá∫üá¶ –ì—Ä–∏–≤–Ω—ã", callback_data=f"clash_profit_uah_{lot_price}_{lot_price_buyer}"),
                    InlineKeyboardButton("üáßüá∑ –†–µ–∞–ª—ã", callback_data=f"clash_profit_brl_{lot_price}_{lot_price_buyer}"),  # –î–æ–±–∞–≤–ª–µ–Ω—ã —Ä–µ–∞–ª—ã
                    InlineKeyboardButton("üá∫üá≤ –î–æ–ª–ª–∞—Ä—ã", callback_data=f"clash_profit_usd_{lot_price}_{lot_price_buyer}"),
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_game_selection")
                )
                bot.send_message(message.chat.id, "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∞–∫—Ü–∏–∏:", reply_markup=markup)
                last_requests[user_id] = f"clash_select_currency_{lot_price}_{lot_price_buyer}"
            except ValueError:
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É –ª–æ—Ç–∞.")
                bot.register_next_step_handler(message, lambda msg: get_clash_royale_lot_price(msg, edit_message_id))

    def get_telegram_lot_price(message: Message, edit_message_id: int):
        user_id = message.from_user.id
        if last_requests.get(user_id) == "telegram":
            try:
                lot_price_buyer = float(message.text)
                markup = InlineKeyboardMarkup(row_width=1)
                markup.add(
                    InlineKeyboardButton("üá∫üá¶ –ì—Ä–∏–≤–Ω—ã", callback_data=f"telegram_profit_uah_{lot_price_buyer}"),
                    InlineKeyboardButton("üáßüá∑ –†–µ–∞–ª—ã", callback_data=f"telegram_profit_brl_{lot_price_buyer}"),  # –î–æ–±–∞–≤–ª–µ–Ω—ã —Ä–µ–∞–ª—ã
                    InlineKeyboardButton("üá∫üá≤ –î–æ–ª–ª–∞—Ä—ã", callback_data=f"telegram_profit_usd_{lot_price_buyer}"),
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_game_selection")
                )
                bot.send_message(message.chat.id, "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∞–∫—Ü–∏–∏:", reply_markup=markup)
                last_requests[user_id] = f"telegram_select_currency_{lot_price_buyer}"
            except ValueError:
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞.")
                bot.register_next_step_handler(message, lambda msg: get_telegram_lot_price(msg, edit_message_id))

    def handle_brawl_stars_currency(call):
        user_id = call.from_user.id
        data = call.data.split("_")
        currency = data[2]
        lot_price = float(data[3])
        lot_price_buyer = float(data[4])
    
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_game_selection"))
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–≤–æ–¥–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏
        bot.edit_message_text(
            f"‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∞–∫—Ü–∏–∏ –≤ {currency.upper()}:",
            call.message.chat.id,
            call.message.id,
            reply_markup=markup
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        last_requests[user_id] = f"brawl_profit_{currency}_{lot_price}_{lot_price_buyer}"
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
        bot.register_next_step_handler(call.message, lambda msg: calculate_brawl_profit(msg, currency, lot_price, lot_price_buyer))
        
    def toggle_quests(call):
        data = call.data.split("_")
        currency, lot_price, lot_price_buyer, action_price = data[2], float(data[3]), float(data[4]), float(data[5])
        message_id = call.message.id
        user_id = call.from_user.id
    
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç)
        current_state = alternate_commission_states.get(
            message_id,
            {"state": False, "profit_rub_off": None, "profit_mdl_off": None}
        )
        new_state = not current_state["state"]  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–≤–∫–ª—é—á–µ–Ω–æ/–≤—ã–∫–ª—é—á–µ–Ω–æ)
    
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ —á–∏—Å—Ç—É—é –≤—ã–≥–æ–¥—É
        mdl_price = action_price * exchange_rates[currency.upper()]
        rub_price = mdl_price * exchange_rates["RUB"]
        commission_rate = 0.08224296149183244 if new_state else 0.16068374059755964
        lot_price_with_commission = lot_price_buyer * (1 - commission_rate)
        net_profit = lot_price_with_commission * 0.97 - rub_price
        net_profit_mdl = net_profit / exchange_rates["RUB"]
        currency_flag = "üá∫üá¶" if currency == "uah" else "üáßüá∑" if currency == "brl" else "üá∫üá≤"  # –û–±–Ω–æ–≤–ª–µ–Ω –≤—ã–±–æ—Ä —Ñ–ª–∞–≥–∞ —Å —É—á–µ—Ç–æ–º BRL
    
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–≥–æ–¥—É "–≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ" —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
        if current_state["profit_rub_off"] is None:
            current_state["profit_rub_off"] = lot_price_buyer * (1 - 0.16068374059755964) * 0.97 - rub_price
            current_state["profit_mdl_off"] = current_state["profit_rub_off"] / exchange_rates["RUB"]
    
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏—Ä–æ—Å—Ç (—Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏)
        profit_diff_rub = net_profit - current_state["profit_rub_off"]
        profit_diff_mdl = net_profit_mdl - current_state["profit_mdl_off"]
    
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state["state"] = new_state
        alternate_commission_states[message_id] = current_state
    
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        profit_message = (
            f"üá∑üá∫ –¶–µ–Ω–∞ –ª–æ—Ç–∞: <code>{lot_price_buyer:.2f}</code> RUB\n"
            f"{currency_flag} –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏: <code>{action_price:.2f}</code> {currency.upper()}\n"
            f"üá≤üá© –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: <code>{mdl_price:.2f}</code> MDL\n\n"
        )
    
        if net_profit < 0:
            profit_message += (
                f"<b>‚ùó –£–±—ã—Ç–æ–∫:</b> <code>{net_profit:.2f}</code> RUB\n"
                f" ‚îî üá≤üá©: ~<code>{net_profit_mdl:.2f}</code> MDL"
            )
        else:
            profit_message += f"<b>üí∞ –ß–∏—Å—Ç–∞—è –≤—ã–≥–æ–¥–∞:</b> <code>{net_profit:.2f}</code> RUB"
            if new_state:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏—Ä–æ—Å—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
                profit_message += f" (<b>+{profit_diff_rub:.2f}</b>)"
            profit_message += f"\n ‚îî üá≤üá©: ~<code>{net_profit_mdl:.2f}</code> MDL"
            if new_state:
                profit_message += f" (<b>+{profit_diff_mdl:.2f}</b>)"
    
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        alternate_commission_text = "üü¢ –ö–≤–µ—Å—Ç—ã" if new_state else "üî¥ –ö–≤–µ—Å—Ç—ã"
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton(alternate_commission_text, callback_data=f"toggle_quests_{currency}_{lot_price}_{lot_price_buyer}_{action_price}"),
            InlineKeyboardButton("‚öôÔ∏è –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å –¥—Ä—É–≥–æ–π —Ü–µ–Ω–æ–π –ª–æ—Ç–∞", callback_data=f"recalculate_brawl_{currency}_{action_price}_{lot_price_buyer}"),
            InlineKeyboardButton("üîÅ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="calculate_profit"),
            InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
        )
    
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.edit_message_text(
            profit_message,
            chat_id=call.message.chat.id,
            message_id=message_id,
            reply_markup=markup,
            parse_mode="HTML"
        )
        
    def handle_clash_royale_currency(call):
        user_id = call.from_user.id
        data = call.data.split("_")
        currency = data[2]
        lot_price = float(data[3])
        lot_price_buyer = float(data[4])
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_game_selection"))
        bot.edit_message_text(
            f"‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∞–∫—Ü–∏–∏ –≤ {currency.upper()}:",
            call.message.chat.id,
            call.message.id,
            reply_markup=markup
        )
        last_requests[user_id] = f"clash_profit_{currency}_{lot_price}_{lot_price_buyer}"
        bot.register_next_step_handler(call.message, lambda msg: calculate_clash_profit(msg, currency, lot_price, lot_price_buyer))
        
    def toggle_items(call):
        data = call.data.split("_")
        currency, lot_price, lot_price_buyer, action_price = data[2], float(data[3]), float(data[4]), float(data[5])
        message_id = call.message.id
        user_id = call.from_user.id
    
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç)
        current_state = alternate_commission_states.get(
            message_id,
            {"state": False, "profit_rub_off": None, "profit_mdl_off": None}
        )
        new_state = not current_state["state"]  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–≤–∫–ª—é—á–µ–Ω–æ/–≤—ã–∫–ª—é—á–µ–Ω–æ)
    
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ —á–∏—Å—Ç—É—é –≤—ã–≥–æ–¥—É
        mdl_price = action_price * exchange_rates[currency.upper()]
        rub_price = mdl_price * exchange_rates["RUB"]
        commission_rate = 0.05576919826590123 if new_state else 0.123214261446109
        lot_price_with_commission = lot_price_buyer * (1 - commission_rate)
        net_profit = lot_price_with_commission * 0.97 - rub_price
        net_profit_mdl = net_profit / exchange_rates["RUB"]
        currency_flag = "üá∫üá¶" if currency == "uah" else "üáßüá∑" if currency == "brl" else "üá∫üá≤"  # –û–±–Ω–æ–≤–ª–µ–Ω –≤—ã–±–æ—Ä —Ñ–ª–∞–≥–∞ —Å —É—á–µ—Ç–æ–º BRL
    
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–≥–æ–¥—É "–≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ" —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
        if current_state["profit_rub_off"] is None:
            current_state["profit_rub_off"] = lot_price_buyer * (1 - 0.123214261446109) * 0.97 - rub_price
            current_state["profit_mdl_off"] = current_state["profit_rub_off"] / exchange_rates["RUB"]
    
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏—Ä–æ—Å—Ç (—Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏)
        profit_diff_rub = net_profit - current_state["profit_rub_off"]
        profit_diff_mdl = net_profit_mdl - current_state["profit_mdl_off"]
    
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state["state"] = new_state
        alternate_commission_states[message_id] = current_state
    
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        profit_message = (
            f"üá∑üá∫ –¶–µ–Ω–∞ –ª–æ—Ç–∞: <code>{lot_price_buyer:.2f}</code> RUB\n"
            f"{currency_flag} –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏: <code>{action_price:.2f}</code> {currency.upper()}\n"
            f"üá≤üá© –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: <code>{mdl_price:.2f}</code> MDL\n\n"
        )
    
        if net_profit < 0:
            profit_message += (
                f"<b>‚ùó –£–±—ã—Ç–æ–∫:</b> <code>{net_profit:.2f}</code> RUB\n"
                f" ‚îî üá≤üá©: ~<code>{net_profit_mdl:.2f}</code> MDL"
            )
        else:
            profit_message += f"<b>üí∞ –ß–∏—Å—Ç–∞—è –≤—ã–≥–æ–¥–∞:</b> <code>{net_profit:.2f}</code> RUB"
            if new_state:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏—Ä–æ—Å—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
                profit_message += f" (<b>+{profit_diff_rub:.2f}</b>)"
            profit_message += f"\n ‚îî üá≤üá©: ~<code>{net_profit_mdl:.2f}</code> MDL"
            if new_state:
                profit_message += f" (<b>+{profit_diff_mdl:.2f}</b>)"
    
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        alternate_items_text = "üü¢ –ü—Ä–µ–¥–º–µ—Ç—ã" if new_state else "üî¥ –ü—Ä–µ–¥–º–µ—Ç—ã"
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton(alternate_items_text, callback_data=f"toggle_items_{currency}_{lot_price}_{lot_price_buyer}_{action_price}"),
            InlineKeyboardButton("‚öôÔ∏è –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å –¥—Ä—É–≥–æ–π —Ü–µ–Ω–æ–π –ª–æ—Ç–∞", callback_data=f"recalculate_clash_{currency}_{action_price}_{lot_price_buyer}"),
            InlineKeyboardButton("üîÅ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="calculate_profit"),
            InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
        )
    
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.edit_message_text(
            profit_message,
            chat_id=call.message.chat.id,
            message_id=message_id,
            reply_markup=markup,
            parse_mode="HTML"
        )

    def handle_telegram_currency(call):
        user_id = call.from_user.id
        data = call.data.split("_")
        currency = data[2]
        lot_price_buyer = float(data[3])
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_game_selection"))
        bot.edit_message_text(
            f"‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∞–∫—Ü–∏–∏ –≤ {currency.upper()}:",
            call.message.chat.id,
            call.message.id,
            reply_markup=markup
        )
        last_requests[user_id] = f"telegram_profit_{currency}_{lot_price_buyer}"
        bot.register_next_step_handler(call.message, lambda msg: calculate_telegram_profit(msg, currency, lot_price_buyer))

    def calculate_brawl_profit(message: Message, currency: str, lot_price: float, lot_price_buyer: float, use_alternate_commission: bool = False):
        user_id = message.from_user.id
        if last_requests.get(user_id) == f"brawl_profit_{currency}_{lot_price}_{lot_price_buyer}":
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏—è
                user_input = message.text.replace(",", ".").replace(" ", "")
                if not all(char.isdigit() or char in "+-*/." for char in user_input):
                    raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ")
        
                action_price = eval(user_input)  # –í—ã—á–∏—Å–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
                mdl_price = action_price * exchange_rates[currency.upper()]
                rub_price = mdl_price * exchange_rates["RUB"]
        
                # –í—ã–±–æ—Ä –∫–æ–º–∏—Å—Å–∏–∏
                commission_rate = 0.08224296149183244 if use_alternate_commission else 0.16068374059755964
                lot_price_with_commission = lot_price_buyer * (1 - commission_rate)
                net_profit = lot_price_with_commission * 0.97 - rub_price
                net_profit_mdl = net_profit / exchange_rates["RUB"]
                currency_flag = "üá∫üá¶" if currency == "uah" else "üáßüá∑" if currency == "brl" else "üá∫üá≤"  # –û–±–Ω–æ–≤–ª–µ–Ω –≤—ã–±–æ—Ä —Ñ–ª–∞–≥–∞ —Å —É—á–µ—Ç–æ–º BRL
        
                profit_message = (
                    f"üá∑üá∫ –¶–µ–Ω–∞ –ª–æ—Ç–∞: <code>{lot_price_buyer:.2f}</code> RUB\n"
                    f"{currency_flag} –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏: <code>{action_price:.2f}</code> {currency.upper()}\n"
                    f"üá≤üá© –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: <code>{mdl_price:.2f}</code> MDL\n\n"
                )
        
                if net_profit < 0:
                    profit_message += (
                        f"<b>‚ùó –£–±—ã—Ç–æ–∫:</b> <code>{net_profit:.2f}</code> RUB\n"
                        f" ‚îî üá≤üá©: ~<code>{net_profit_mdl:.2f}</code> MDL"
                    )
                else:
                    profit_message += (
                        f"<b>üí∞ –ß–∏—Å—Ç–∞—è –≤—ã–≥–æ–¥–∞:</b> <code>{net_profit:.2f}</code> RUB\n"
                        f" ‚îî üá≤üá©: ~<code>{net_profit_mdl:.2f}</code> MDL"
                    )
        
                # –ö–Ω–æ–ø–∫–∏
                alternate_commission_text = "üü¢ –ö–≤–µ—Å—Ç—ã" if use_alternate_commission else "üî¥ –ö–≤–µ—Å—Ç—ã"
                markup = InlineKeyboardMarkup(row_width=1)
                markup.add(
                    InlineKeyboardButton(alternate_commission_text, callback_data=f"toggle_quests_{currency}_{lot_price}_{lot_price_buyer}_{action_price}"),
                    InlineKeyboardButton("‚öôÔ∏è –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å –¥—Ä—É–≥–æ–π —Ü–µ–Ω–æ–π –ª–æ—Ç–∞", callback_data=f"recalculate_brawl_{currency}_{action_price}_{lot_price_buyer}"),
                    InlineKeyboardButton("üîÅ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="calculate_profit"),
                    InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                )
        
                bot.send_message(message.chat.id, profit_message, reply_markup=markup, parse_mode="HTML")
        
            except (ValueError, SyntaxError):
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏.")
                bot.register_next_step_handler(message, lambda msg: calculate_brawl_profit(msg, currency, lot_price, lot_price_buyer, use_alternate_commission))

    def calculate_clash_profit(message: Message, currency: str, lot_price: float, lot_price_buyer: float, use_items: bool = False):
        user_id = message.from_user.id
        if last_requests.get(user_id) == f"clash_profit_{currency}_{lot_price}_{lot_price_buyer}":
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏—è
                user_input = message.text.replace(",", ".").replace(" ", "")
                if not all(char.isdigit() or char in "+-*/." for char in user_input):
                    raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ")
    
                action_price = eval(user_input)  # –í—ã—á–∏—Å–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
                mdl_price = action_price * exchange_rates[currency.upper()]
                rub_price = mdl_price * exchange_rates["RUB"]
    
                # –í—ã–±–æ—Ä –∫–æ–º–∏—Å—Å–∏–∏
                commission_rate = 0.05576919826590123 if use_items else 0.123214261446109
                lot_price_with_commission = lot_price_buyer * (1 - commission_rate)
                net_profit = lot_price_with_commission * 0.97 - rub_price
                net_profit_mdl = net_profit / exchange_rates["RUB"]
                currency_flag = "üá∫üá¶" if currency == "uah" else "üáßüá∑" if currency == "brl" else "üá∫üá≤"  # –û–±–Ω–æ–≤–ª–µ–Ω –≤—ã–±–æ—Ä —Ñ–ª–∞–≥–∞ —Å —É—á–µ—Ç–æ–º BRL
    
                profit_message = (
                    f"üá∑üá∫ –¶–µ–Ω–∞ –ª–æ—Ç–∞: <code>{lot_price_buyer:.2f}</code> RUB\n"
                    f"{currency_flag} –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏: <code>{action_price:.2f}</code> {currency.upper()}\n"
                    f"üá≤üá© –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: <code>{mdl_price:.2f}</code> MDL\n\n"
                )
    
                if net_profit < 0:
                    profit_message += (
                        f"<b>‚ùó –£–±—ã—Ç–æ–∫:</b> <code>{net_profit:.2f}</code> RUB\n"
                        f" ‚îî üá≤üá©: ~<code>{net_profit_mdl:.2f}</code> MDL"
                    )
                else:
                    profit_message += (
                        f"<b>üí∞ –ß–∏—Å—Ç–∞—è –≤—ã–≥–æ–¥–∞:</b> <code>{net_profit:.2f}</code> RUB\n"
                        f" ‚îî üá≤üá©: ~<code>{net_profit_mdl:.2f}</code> MDL"
                    )
    
                # –ö–Ω–æ–ø–∫–∏
                alternate_items_text = "üî¥ –ü—Ä–µ–¥–º–µ—Ç—ã"
                markup = InlineKeyboardMarkup(row_width=1)
                markup.add(
                    InlineKeyboardButton(alternate_items_text, callback_data=f"toggle_items_{currency}_{lot_price}_{lot_price_buyer}_{action_price}"),
                    InlineKeyboardButton("‚öôÔ∏è –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å –¥—Ä—É–≥–æ–π —Ü–µ–Ω–æ–π –ª–æ—Ç–∞", callback_data=f"recalculate_clash_{currency}_{action_price}_{lot_price_buyer}"),
                    InlineKeyboardButton("üîÅ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="calculate_profit"),
                    InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                )
    
                bot.send_message(message.chat.id, profit_message, reply_markup=markup, parse_mode="HTML")
    
            except (ValueError, SyntaxError):
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏.")
                bot.register_next_step_handler(message, lambda msg: calculate_clash_profit(msg, currency, lot_price, lot_price_buyer, use_items))

    def calculate_telegram_profit(message: Message, currency: str, lot_price_buyer: float):
        user_id = message.from_user.id
        if last_requests.get(user_id) == f"telegram_profit_{currency}_{lot_price_buyer}":
            try:
                action_price = eval(message.text.replace(',', '+'))
                mdl_price = action_price * exchange_rates[currency.upper()]
                rub_price = mdl_price * exchange_rates["RUB"]
                net_profit = lot_price_buyer - rub_price
                currency_flag = "üá∫üá¶" if currency == "uah" else "üáßüá∑" if currency == "brl" else "üá∫üá≤"  # –û–±–Ω–æ–≤–ª–µ–Ω –≤—ã–±–æ—Ä —Ñ–ª–∞–≥–∞ —Å —É—á–µ—Ç–æ–º BRL
                net_profit_mdl = net_profit / exchange_rates["RUB"]

                profit_message = (
                    f"üá∑üá∫ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: <code>{lot_price_buyer:.2f}</code> RUB\n"
                    f"{currency_flag} –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏: <code>{action_price:.2f}</code> {currency.upper()}\n"
                    f"üá≤üá© –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: <code>{mdl_price:.2f}</code> MDL\n\n"
                )

                if net_profit < 0:
                    profit_message += (
                        f"<b>‚ùó –£–±—ã—Ç–æ–∫:</b> <code>{net_profit:.2f}</code> RUB\n"
                        f" ‚îî üá≤üá©: ~<code>{net_profit_mdl:.2f}</code> MDL"
                    )
                else:
                    profit_message += (
                        f"<b>üí∞ –ß–∏—Å—Ç–∞—è –≤—ã–≥–æ–¥–∞:</b> <code>{net_profit:.2f}</code> RUB\n"
                        f" ‚îî üá≤üá©: ~<code>{net_profit_mdl:.2f}</code> MDL"
                    )

                markup = InlineKeyboardMarkup(row_width=1)
                markup.add(
                    InlineKeyboardButton("‚öôÔ∏è –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å –¥—Ä—É–≥–æ–π —Ü–µ–Ω–æ–π —Ç–æ–≤–∞—Ä–∞", callback_data=f"recalculate_telegram_{currency}_{action_price}_{lot_price_buyer}"),
                    InlineKeyboardButton("üîÅ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="calculate_profit"),
                    InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                )
                bot.send_message(message.chat.id, profit_message, reply_markup=markup, parse_mode="HTML")
            except (ValueError, SyntaxError):
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏.")
                bot.register_next_step_handler(message, lambda msg: calculate_telegram_profit(msg, currency, lot_price_buyer))

    def recalculate_with_different_brawl_lot(call):
        user_id = call.from_user.id
        data = call.data.split("_")
        currency = data[2]
        action_price = float(data[3])
        lot_price_buyer = float(data[4])
        
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_game_selection"))
        
        bot.edit_message_text(
            "üí∏ –í–≤–µ–¥–∏—Ç–µ *–¥—Ä—É–≥—É—é* —Ü–µ–Ω—É –ª–æ—Ç–∞ –≤ —Ä—É–±–ª—è—Ö:",
            call.message.chat.id,
            call.message.id,
            parse_mode="Markdown",
            reply_markup=markup
        )
        last_requests[user_id] = f"recalculate_brawl_{currency}_{action_price}_{lot_price_buyer}"
        bot.register_next_step_handler(
            call.message, 
            lambda msg: calculate_with_different_brawl_lot(msg, currency, action_price, lot_price_buyer)
        )

    def recalculate_with_different_clash_lot(call):
        user_id = call.from_user.id
        data = call.data.split("_")
        currency = data[2]
        action_price = float(data[3])
        lot_price_buyer = float(data[4])
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_game_selection"))
        bot.edit_message_text(
            "üí∏ –í–≤–µ–¥–∏—Ç–µ *–¥—Ä—É–≥—É—é* —Ü–µ–Ω—É –ª–æ—Ç–∞ –≤ —Ä—É–±–ª—è—Ö:",
            call.message.chat.id,
            call.message.id,
            parse_mode="Markdown",
            reply_markup=markup
        )
        last_requests[user_id] = f"recalculate_clash_{currency}_{action_price}_{lot_price_buyer}"
        bot.register_next_step_handler(call.message, lambda msg: calculate_with_different_clash_lot(msg, currency, action_price, lot_price_buyer))

    def recalculate_with_different_telegram_lot(call):
        user_id = call.from_user.id
        data = call.data.split("_")
        currency = data[2]
        action_price = float(data[3])
        lot_price_buyer = float(data[4])
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_game_selection"))
        bot.edit_message_text(
            "üí∏ –í–≤–µ–¥–∏—Ç–µ *–¥—Ä—É–≥—É—é* —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö:",
            call.message.chat.id,
            call.message.id,
            parse_mode="Markdown",
            reply_markup=markup
        )
        last_requests[user_id] = f"recalculate_telegram_{currency}_{action_price}_{lot_price_buyer}"
        bot.register_next_step_handler(call.message, lambda msg: calculate_with_different_telegram_lot(msg, currency, action_price, lot_price_buyer))

    def calculate_with_different_brawl_lot(message: Message, currency: str, action_price: float, original_lot_price_buyer: float):
        user_id = message.from_user.id
        
        if last_requests.get(user_id) == f"recalculate_brawl_{currency}_{action_price}_{original_lot_price_buyer}":
            try:
                # –í–≤–æ–¥ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã –ª–æ—Ç–∞
                new_lot_price_buyer = float(message.text)
                lot_price = new_lot_price_buyer * (1 - 0.16068374059755964)
                mdl_price = action_price * exchange_rates[currency.upper()]
                rub_price = mdl_price * exchange_rates["RUB"]
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∏—Å—Ç—É—é –≤—ã–≥–æ–¥—É
                net_profit = lot_price * 0.97 - rub_price
                net_profit_mdl = net_profit / exchange_rates["RUB"]
                currency_flag = "üá∫üá¶" if currency == "uah" else "üáßüá∑" if currency == "brl" else "üá∫üá≤"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –≤—ã–±–æ—Ä —Ñ–ª–∞–≥–∞
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è "–î—Ä—É–≥–∞—è –∫–æ–º–∏—Å—Å–∏—è", –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—è –∫–∞–∫ –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                alternate_commission_states[message.id] = {
                    "state": False,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω–æ
                    "profit_rub_off": net_profit,
                    "profit_mdl_off": net_profit_mdl
                }
    
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                profit_message = (
                    f"üá∑üá∫ –¶–µ–Ω–∞ –ª–æ—Ç–∞: <code>{new_lot_price_buyer:.2f}</code> RUB\n"
                    f"{currency_flag} –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏: <code>{action_price:.2f}</code> {currency.upper()}\n"
                    f"üá≤üá© –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: <code>{mdl_price:.2f}</code> MDL\n\n"
                )
                if net_profit < 0:
                    profit_message += (
                        f"<b>‚ùó –£–±—ã—Ç–æ–∫:</b> <code>{net_profit:.2f}</code> RUB\n"
                        f" ‚îî üá≤üá©: ~<code>{net_profit_mdl:.2f}</code> MDL"
                    )
                else:
                    profit_message += (
                        f"<b>üí∞ –ß–∏—Å—Ç–∞—è –≤—ã–≥–æ–¥–∞:</b> <code>{net_profit:.2f}</code> RUB\n"
                        f" ‚îî üá≤üá©: ~<code>{net_profit_mdl:.2f}</code> MDL"
                    )
    
                # –ö–Ω–æ–ø–∫–∏
                alternate_commission_text = "üî¥ –ö–≤–µ—Å—Ç—ã"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω–æ
                markup = InlineKeyboardMarkup(row_width=1)
                markup.add(
                    InlineKeyboardButton(alternate_commission_text, callback_data=f"toggle_quests_{currency}_{lot_price}_{new_lot_price_buyer}_{action_price}"),
                    InlineKeyboardButton("‚öôÔ∏è –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å –¥—Ä—É–≥–æ–π —Ü–µ–Ω–æ–π –ª–æ—Ç–∞", callback_data=f"recalculate_brawl_{currency}_{action_price}_{new_lot_price_buyer}"),
                    InlineKeyboardButton("üîÅ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="calculate_profit"),
                    InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                )
    
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                bot.send_message(message.chat.id, profit_message, reply_markup=markup, parse_mode="HTML")
    
            except ValueError:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –≤–≤–æ–¥–∞
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É –ª–æ—Ç–∞.")
                bot.register_next_step_handler(
                    message, 
                    lambda msg: calculate_with_different_brawl_lot(msg, currency, action_price, original_lot_price_buyer)
                )
                
    def calculate_with_different_clash_lot(message: Message, currency: str, action_price: float, original_lot_price_buyer: float):
        user_id = message.from_user.id
        if last_requests.get(user_id) == f"recalculate_clash_{currency}_{action_price}_{original_lot_price_buyer}":
            try:
                new_lot_price_buyer = float(message.text)
                lot_price = new_lot_price_buyer * (1 - 0.123214261446109)
                mdl_price = action_price * exchange_rates[currency.upper()]
                rub_price = mdl_price * exchange_rates["RUB"]
    
                net_profit = lot_price * 0.97 - rub_price
                net_profit_mdl = net_profit / exchange_rates["RUB"]
                currency_flag = "üá∫üá¶" if currency == "uah" else "üáßüá∑" if currency == "brl" else "üá∫üá≤"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –≤—ã–±–æ—Ä —Ñ–ª–∞–≥–∞
    
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–ü—Ä–µ–¥–º–µ—Ç—ã"
                alternate_commission_states[message.id] = {
                    "state": False,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω–æ
                    "profit_rub_off": net_profit,
                    "profit_mdl_off": net_profit_mdl
                }
    
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                profit_message = (
                    f"üá∑üá∫ –¶–µ–Ω–∞ –ª–æ—Ç–∞: <code>{new_lot_price_buyer:.2f}</code> RUB\n"
                    f"{currency_flag} –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏: <code>{action_price:.2f}</code> {currency.upper()}\n"
                    f"üá≤üá© –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: <code>{mdl_price:.2f}</code> MDL\n\n"
                )
    
                if net_profit < 0:
                    profit_message += (
                        f"<b>‚ùó –£–±—ã—Ç–æ–∫:</b> <code>{net_profit:.2f}</code> RUB\n"
                        f" ‚îî üá≤üá©: ~<code>{net_profit_mdl:.2f}</code> MDL"
                    )
                else:
                    profit_message += (
                        f"<b>üí∞ –ß–∏—Å—Ç–∞—è –≤—ã–≥–æ–¥–∞:</b> <code>{net_profit:.2f}</code> RUB\n"
                        f" ‚îî üá≤üá©: ~<code>{net_profit_mdl:.2f}</code> MDL"
                    )
    
                # –ö–Ω–æ–ø–∫–∏
                alternate_items_text = "üî¥ –ü—Ä–µ–¥–º–µ—Ç—ã"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω–æ
                markup = InlineKeyboardMarkup(row_width=1)
                markup.add(
                    InlineKeyboardButton(alternate_items_text, callback_data=f"toggle_items_{currency}_{lot_price}_{new_lot_price_buyer}_{action_price}"),
                    InlineKeyboardButton("‚öôÔ∏è –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å –¥—Ä—É–≥–æ–π —Ü–µ–Ω–æ–π –ª–æ—Ç–∞", callback_data=f"recalculate_clash_{currency}_{action_price}_{new_lot_price_buyer}"),
                    InlineKeyboardButton("üîÅ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="calculate_profit"),
                    InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                )
    
                bot.send_message(message.chat.id, profit_message, reply_markup=markup, parse_mode="HTML")
            except ValueError:
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
                bot.register_next_step_handler(message, lambda msg: calculate_with_different_clash_lot(msg, currency, action_price, original_lot_price_buyer))
                
    def calculate_with_different_telegram_lot(message: Message, currency: str, action_price: float, original_lot_price_buyer: float):
        user_id = message.from_user.id
        if last_requests.get(user_id) == f"recalculate_telegram_{currency}_{action_price}_{original_lot_price_buyer}":
            try:
                new_lot_price_buyer = float(message.text)
                mdl_price = action_price * exchange_rates[currency.upper()]
                rub_price = mdl_price * exchange_rates["RUB"]
                net_profit = new_lot_price_buyer - rub_price
                net_profit_mdl = net_profit / exchange_rates["RUB"]
                currency_flag = "üá∫üá¶" if currency == "uah" else "üáßüá∑" if currency == "brl" else "üá∫üá≤"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –≤—ã–±–æ—Ä —Ñ–ª–∞–≥–∞

                profit_message = (
                    f"üá∑üá∫ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: <code>{new_lot_price_buyer:.2f}</code> RUB\n"
                    f"{currency_flag} –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏: <code>{action_price:.2f}</code> {currency.upper()}\n"
                    f"üá≤üá© –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: <code>{mdl_price:.2f}</code> MDL\n\n"
                )

                if net_profit < 0:
                    profit_message += (
                        f"<b>‚ùó –£–±—ã—Ç–æ–∫:</b> <code>{net_profit:.2f}</code> RUB\n"
                        f" ‚îî üá≤üá©: ~<code>{net_profit_mdl:.2f}</code> MDL"
                    )
                else:
                    profit_message += (
                        f"<b>üí∞ –ß–∏—Å—Ç–∞—è –≤—ã–≥–æ–¥–∞:</b> <code>{net_profit:.2f}</code> RUB\n"
                        f" ‚îî üá≤üá©: ~<code>{net_profit_mdl:.2f}</code> MDL"
                    )

                markup = InlineKeyboardMarkup(row_width=1)
                markup.add(
                    InlineKeyboardButton("‚öôÔ∏è –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å –¥—Ä—É–≥–æ–π —Ü–µ–Ω–æ–π —Ç–æ–≤–∞—Ä–∞", callback_data=f"recalculate_telegram_{currency}_{action_price}_{new_lot_price_buyer}"),
                    InlineKeyboardButton("üîÅ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="calculate_profit"),
                    InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                )
                bot.send_message(message.chat.id, profit_message, reply_markup=markup, parse_mode="HTML")
            except (ValueError, SyntaxError):
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞.")
                bot.register_next_step_handler(message, lambda msg: calculate_with_different_telegram_lot(msg, currency, action_price, original_lot_price_buyer))
                
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /rate
    cardinal.add_telegram_commands(UUID, [
        ("rate", "–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—ã–≥–æ–¥—É.", True)
    ])
    bot.register_message_handler(start_rate, commands=["rate"])
    bot.register_callback_query_handler(handle_callback, func=lambda call: call.data.startswith("update_") or call.data == "calculate_profit" or call.data == "back_to_main" or call.data == "back_to_update_rates" or call.data == "brawl_stars" or call.data == "clash_royale" or call.data == "telegram" or call.data == "back_to_game_selection")
    bot.register_callback_query_handler(handle_brawl_stars_currency, func=lambda call: call.data.startswith("brawl_profit_"))
    bot.register_callback_query_handler(toggle_quests, func=lambda call: call.data.startswith("toggle_quests_"))
    bot.register_callback_query_handler(handle_clash_royale_currency, func=lambda call: call.data.startswith("clash_profit_"))
    bot.register_callback_query_handler(toggle_items, func=lambda call: call.data.startswith("toggle_items_"))
    bot.register_callback_query_handler(handle_telegram_currency, func=lambda call: call.data.startswith("telegram_profit_"))
    bot.register_callback_query_handler(recalculate_with_different_brawl_lot, func=lambda call: call.data.startswith("recalculate_brawl_"))
    bot.register_callback_query_handler(recalculate_with_different_clash_lot, func=lambda call: call.data.startswith("recalculate_clash_"))
    bot.register_callback_query_handler(recalculate_with_different_telegram_lot, func=lambda call: call.data.startswith("recalculate_telegram_"))

BIND_TO_PRE_INIT = [main]
BIND_TO_DELETE = None